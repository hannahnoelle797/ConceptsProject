Line Number: 1	Lexeme: x	Token: id
Line Number: 1	Lexeme: =	Token: eq_operator
Line Number: 1	Lexeme: 7	Token: integer_literal
Line Number: 2	Lexeme: if	Token: if_statement
Line Number: 2	Lexeme: x	Token: id
Line Number: 2	Lexeme: %	Token: mod_operator
Line Number: 2	Lexeme: 2	Token: integer_literal
Line Number: 2	Lexeme: ==	Token: eqal_operator
Line Number: 2	Lexeme: 0	Token: integer_literal
Line Number: 3	Lexeme: print	Token: print_statement
Line Number: 3	Lexeme: (	Token: parenthesis_open
Line Number: 3	Lexeme: 7	Token: integer_literal
Line Number: 3	Lexeme: +	Token: add_operator
Line Number: 3	Lexeme: 1	Token: integer_literal
Line Number: 3	Lexeme: )	Token: parenthesis_closed
Line Number: 4	Lexeme: else	Token: else_statement
Line Number: 5	Lexeme: print	Token: print_statement
Line Number: 5	Lexeme: (	Token: parenthesis_open
Line Number: 5	Lexeme: 7	Token: integer_literal
Line Number: 5	Lexeme: )	Token: parenthesis_closed
Line Number: 6	Lexeme: end	Token: end_statement
Line Number: 8	Lexeme: function	Token: function_statment
Line Number: 8	Lexeme: a	Token: id
Line Number: 8	Lexeme: (	Token: parenthesis_open
Line Number: 8	Lexeme: )	Token: parenthesis_closed
Line Number: 9	Lexeme: a	Token: id
Line Number: 9	Lexeme: =	Token: eq_operator
Line Number: 9	Lexeme: 7	Token: integer_literal
Line Number: 10	Lexeme: print	Token: print_statement
Line Number: 10	Lexeme: (	Token: parenthesis_open
Line Number: 10	Lexeme: a	Token: id
Line Number: 10	Lexeme: )	Token: parenthesis_closed
Line Number: 11	Lexeme: end	Token: end_statement
